class Logger{constructor(e=!1){Logline.using(Logline.PROTOCOL.INDEXEDDB),this.extensionLog=new Logline("extension"),this.keep(7),Logline.config.set("verbose",!1),this.sendMessageMode=e,this.debugMode=!1}enableDebug(){this.debugMode=!0}sendMessage(e,s,n){chrome.runtime.sendMessage({action:"log",level:e,descriptor:s,data:n})}info(e,s){this.sendMessageMode?this.sendMessage("INFO",e,s):this.extensionLog.info(e,s)}warn(e,s){this.sendMessageMode?this.sendMessage("WARN",e,s):this.extensionLog.warn(e,s)}error(e,s){this.sendMessageMode?this.sendMessage("ERROR",e,s):this.extensionLog.error(e,s)}debug(e,s){if(!this.debugMode)return;let n="[debug] "+e;this.sendMessageMode?this.sendMessage("INFO",n,s):this.extensionLog.info(n,s)}critical(e,s){this.sendMessageMode?this.sendMessage("CRITICAL",e,s):this.extensionLog.critical(e,s)}all(e){this.sendMessageMode?chrome.runtime.sendMessage({action:"get-log"},function(s){e(s.logs)}):Logline.all(function(s){e(s)})}get(e,s){Logline.get(e,function(e){s(e)})}keep(e=.5){Logline.keep(e)}clean(){Logline.clean()}status(){return Logline.PROTOCOL.INDEXEDDB.status}}